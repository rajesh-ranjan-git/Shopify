// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Users {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Cart    Cart[]
  Address Address[]
  Order   Orders[]
}

model Products {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String  @unique
  description String
  category    String
  brand       String
  price       Float
  salePrice   Float?
  totalStock  Int
  image       String?

  Cart Cart[]
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  Orders  Orders[]

  @@unique([userId, productId], map: "unique_user_product") // Ensure unique product per user
}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  address   String
  city      String
  pincode   String
  phone     String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Orders {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber     String          @unique
  userId          String          @db.ObjectId
  user            Users           @relation(fields: [userId], references: [id])
  orderItems      OrderItems[]
  cartId          String          @db.ObjectId
  cart            Cart            @relation(fields: [cartId], references: [id])
  totalAmount     Int
  orderStatus     String
  payerId         String
  paymentId       String
  paymentStatus   String
  paymentMethod   String
  addressId       String          @db.ObjectId
  shippingAddress ShippingAddress @relation(fields: [addressId], references: [id])
  orderDate       DateTime        @default(now())
  orderUpdateDate DateTime        @updatedAt
}

model OrderItems {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Orders   @relation(fields: [orderId], references: [id])
  productId String   @db.ObjectId
  quantity  Int
  price     Float
  image     String
  createdAt DateTime @default(now())
}

model ShippingAddress {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  address   String
  city      String
  pincode   String
  phone     String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Orders[]
}
